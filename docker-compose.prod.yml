version: '3.3'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: triathlon-backend-prod
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=sqlite:///./triathlon_training.db
      - CORS_ORIGINS=http://localhost,http://localhost:80,https://yourdomain.com,https://www.yourdomain.com
    volumes:
      - backend-data:/app/data
    networks:
      - triathlon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/')"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Не экспонируем порт наружу - доступ только через Nginx

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: triathlon-frontend-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost  # API через Nginx на том же домене
    depends_on:
      - backend
    networks:
      - triathlon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Не экспонируем порт наружу - доступ только через Nginx

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: triathlon-nginx-prod
    ports:
      - "80:80"
      - "443:443"  # Для HTTPS
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL сертификаты (если есть)
    depends_on:
      - frontend
      - backend
    networks:
      - triathlon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  triathlon-network:
    driver: bridge

volumes:
  backend-data:
    driver: local
