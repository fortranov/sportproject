#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Triathlon Training Service API
"""

import requests
import json
from datetime import date, timedelta

BASE_URL = "http://localhost:8000"

def example_create_beginner_plan():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ —Ç—Ä–∏–∞—Ç–ª–µ—Ç–∞"""
    print("üî∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ —Ç—Ä–∏–∞—Ç–ª–µ—Ç–∞")
    
    data = {
        "uin": "beginner_001",
        "competition_date": (date.today() + timedelta(days=120)).isoformat(),
        "difficulty": 200  # –ù–∞—á–∏–Ω–∞—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    }
    
    response = requests.post(f"{BASE_URL}/training-plan", json=data)
    
    if response.status_code == 200:
        plan = response.json()
        print(f"‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω! ID: {plan['id']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_hours = sum(day['total_hours'] for day in plan['training_days'])
        avg_weekly = total_hours / (len(plan['training_days']) / 7)
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {avg_weekly:.1f} —á–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—è")
        
        return plan
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def example_create_intermediate_plan():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    print("üèÉ‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è")
    
    data = {
        "uin": "intermediate_001",
        "competition_date": (date.today() + timedelta(days=150)).isoformat(),
        "difficulty": 500  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    }
    
    response = requests.post(f"{BASE_URL}/training-plan", json=data)
    
    if response.status_code == 200:
        plan = response.json()
        print(f"‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω! ID: {plan['id']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        total_swim = sum(day['swimming_hours'] for day in plan['training_days'])
        total_bike = sum(day['cycling_hours'] for day in plan['training_days'])
        total_run = sum(day['running_hours'] for day in plan['training_days'])
        total = total_swim + total_bike + total_run
        
        print(f"üèä‚Äç‚ôÇÔ∏è –ü–ª–∞–≤–∞–Ω–∏–µ: {total_swim:.1f}—á ({total_swim/total*100:.1f}%)")
        print(f"üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥: {total_bike:.1f}—á ({total_bike/total*100:.1f}%)")
        print(f"üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥: {total_run:.1f}—á ({total_run/total*100:.1f}%)")
        
        return plan
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def example_create_advanced_plan():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç—Ä–∏–∞—Ç–ª–µ—Ç–∞"""
    print("üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç—Ä–∏–∞—Ç–ª–µ—Ç–∞")
    
    data = {
        "uin": "advanced_001",
        "competition_date": (date.today() + timedelta(days=180)).isoformat(),
        "difficulty": 850  # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å
    }
    
    response = requests.post(f"{BASE_URL}/training-plan", json=data)
    
    if response.status_code == 200:
        plan = response.json()
        print(f"‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω! ID: {plan['id']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–∫–æ–≤—É—é –Ω–µ–¥–µ–ª—é
        weekly_hours = []
        for i in range(0, len(plan['training_days']), 7):
            week_days = plan['training_days'][i:i+7]
            week_total = sum(day['total_hours'] for day in week_days)
            weekly_hours.append(week_total)
        
        max_week = max(weekly_hours) if weekly_hours else 0
        print(f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {max_week:.1f} —á–∞—Å–æ–≤")
        
        return plan
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def example_get_plan(uin):
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uin}")
    
    response = requests.get(f"{BASE_URL}/training-plan/{uin}")
    
    if response.status_code == 200:
        plan = response.json()
        print(f"‚úÖ –ü–ª–∞–Ω –Ω–∞–π–¥–µ–Ω! –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è: {plan['competition_date']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
        today = date.today()
        upcoming_days = [
            day for day in plan['training_days'] 
            if date.fromisoformat(day['date']) >= today
        ][:7]
        
        print("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:")
        for day in upcoming_days:
            print(f"  {day['date']}: {day['total_hours']:.1f}—á "
                  f"(üèä‚Äç‚ôÇÔ∏è{day['swimming_hours']:.1f} üö¥‚Äç‚ôÇÔ∏è{day['cycling_hours']:.1f} üèÉ‚Äç‚ôÇÔ∏è{day['running_hours']:.1f})")
        
        return plan
    else:
        print(f"‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {response.text}")
        return None

def example_update_plan():
    """–ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞")
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
    uin = "update_test_001"
    data1 = {
        "uin": uin,
        "competition_date": (date.today() + timedelta(days=100)).isoformat(),
        "difficulty": 300
    }
    
    response1 = requests.post(f"{BASE_URL}/training-plan", json=data1)
    if response1.status_code == 200:
        plan1 = response1.json()
        total1 = sum(day['total_hours'] for day in plan1['training_days'])
        print(f"‚úÖ –ü–µ—Ä–≤—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω. –û–±—â–µ–µ –≤—Ä–µ–º—è: {total1:.1f} —á–∞—Å–æ–≤")
    
    # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –¥—Ä—É–≥–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
    data2 = {
        "uin": uin,
        "competition_date": (date.today() + timedelta(days=100)).isoformat(),
        "difficulty": 600  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    }
    
    response2 = requests.post(f"{BASE_URL}/training-plan", json=data2)
    if response2.status_code == 200:
        plan2 = response2.json()
        total2 = sum(day['total_hours'] for day in plan2['training_days'])
        print(f"‚úÖ –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è: {total2:.1f} —á–∞—Å–æ–≤")
        print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {total2-total1:+.1f} —á–∞—Å–æ–≤")

def example_delete_plan(uin):
    """–ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uin}")
    
    response = requests.delete(f"{BASE_URL}/training-plan/{uin}")
    
    if response.status_code == 200:
        print("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
        check_response = requests.get(f"{BASE_URL}/training-plan/{uin}")
        if check_response.status_code == 404:
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø–ª–∞–Ω –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üèä‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÇÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Triathlon Training Service")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
        response = requests.get(f"{BASE_URL}/")
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
            return
        
        print("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        print()
        
        # –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤
        print("1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–û–í")
        print("-" * 30)
        example_create_beginner_plan()
        print()
        example_create_intermediate_plan()
        print()
        example_create_advanced_plan()
        print()
        
        # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
        print("2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–õ–ê–ù–û–í")
        print("-" * 30)
        example_get_plan("intermediate_001")
        print()
        
        # –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
        print("3Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–õ–ê–ù–ê")
        print("-" * 30)
        example_update_plan()
        print()
        
        # –ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
        print("4Ô∏è‚É£ –£–î–ê–õ–ï–ù–ò–ï –ü–õ–ê–ù–ê")
        print("-" * 30)
        example_delete_plan("beginner_001")
        print()
        
        print("üèÅ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
